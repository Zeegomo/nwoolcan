package nwoolcan.model.brewery.warehouse.article;

import nwoolcan.model.utils.UnitOfMeasure;
import nwoolcan.utils.Result;

import java.util.Objects;

/**
 * General implementation of Article. It can contains only article of MISC type.
 * Override your class for a particular Article implementation.
 */
public class ArticleImpl extends AbstractArticle {



    /**
     * Constructor of the class. Only article of type miscellaneous can be constructed.
     * @param id the identifier of the new {@link Article}. It should be generated by the {@link ArticleManager}.
     * @param name the name of the new {@link Article}.
     * @param unitOfMeasure used for this {@link Article}.
     */
    // Package-private
    ArticleImpl(final int id, final String name, final UnitOfMeasure unitOfMeasure) {
        super(id, name, unitOfMeasure);
        if (name.isEmpty()) {
            throw new IllegalArgumentException("Name can not be empty.");
        }
    }


    /**
     * Returns the type of article.
     * Override this method according on the type of article which is being represented.
     * @return the type of article.
     */
    @Override
    public ArticleType getArticleType() {
        return ArticleType.MISC;
    }
    /**
     * To override this method return the linked IngredientArticle in case it is an ingredient,
     * or an error {@link Result} otherwise.
     * @return an error {@link Result} because this is not an Ingredient, this is a general article.
     */
    @Override
    public Result<IngredientArticle> toIngredientArticle() {
        return Result.error(new IllegalAccessException("This is not Ingredient Article."));
    }
    /**
     * To override this method return the linked BeerArticle in case it is an ingredient,
     * or an error {@link Result} otherwise.
     * @return an error {@link Result} because this is not a Beer, this is a general article.
     */
    @Override
    public Result<BeerArticle> toBeerArticle() {
        return Result.error(new IllegalAccessException("This is not a Beer Article"));
    }

    /**
     * To override this method you should call Objects.hash with parameters this super class and the other fields.
     * @return the result of the xor operation between id and the hash of the name.
     */
    @Override
    public int hashCode() {
        return Objects.hash(getName(), getUnitOfMeasure(), getArticleType());
    }
    /**
     * To override this method compare all the fields of the classes.
     * @param obj the object to be compared with.
     * @return true if all the fields contains respectively the same value.
     */
    @Override
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ArticleImpl)) {
            return false;
        }

        ArticleImpl other = (ArticleImpl) obj;
        return getName().equals(other.getName())
            && getUnitOfMeasure().equals(other.getUnitOfMeasure())
            && this.getArticleType().equals(other.getArticleType());
    }
    /**
     * To override this method add also other elements of the new class.
     * @return a string representation of the class.
     */
    @Override
    public String toString() {
        return "[ArticleImpl]{"
            + "id=" + getId()
            + ", name='" + super.getName() + '\''
            + ", unitOfMeasure=" + getUnitOfMeasure()
            + ", articleType=" + getArticleType()
            + '}';
    }
}
